input {
  beats {
    port => 5044
  }
}

filter {
  if [docker][container][name] =~ /(postgres|rabbitmq|nginx)/ {
    grok {
      match => {
        "message" => [
          "%{TIMESTAMP_ISO8601:log_timestamp}(\s+)?(\[%{LOGLEVEL:level}\])? %{GREEDYDATA:msg}"
        ]
      }
      overwrite => [ "message" ]
    }

    date {
      match => ["log_timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss", "YYYY-MM-dd HH:mm:ss,SSS"]
      target => "@timestamp"
      remove_field => ["log_timestamp"]
    }

    mutate {
      add_field => {
        "service_type" => "system"
        "source_container" => "%{[docker][container][name]}"
        "environment" => "production"
      }
      rename => { "msg" => "message" }
    }

    mutate {
      lowercase => ["level"]
    }

    mutate {
      remove_field => ["agent", "ecs", "host", "input", "log", "tags"]
    }
  }

  else {
    json {
      source => "message"
      target => "json"
      skip_on_invalid_json => true
    }

    if [json][message] {
      mutate {
        rename => { "[json][message]" => "message" }
      }
    }

    if [json][level] {
      mutate {
        rename => { "[json][level]" => "level" }
      }
    }

    if [json][ts] {
      date {
        match => ["[json][ts]", "ISO8601", "UNIX", "UNIX_MS"]
        target => "@timestamp"
      }
      mutate {
        remove_field => ["[json][ts]"]
      }
    }

    mutate {
      add_field => {
        "service_type" => "application"
        "source_container" => "%{[docker][container][name]}"
        "environment" => "production"
      }
      lowercase => ["level"]
    }

    ruby {
      code => '
        if event.get("json").is_a?(Hash)
          event.get("json").each { |k, v| event.set(k, v) unless event.include?(k) }
          event.remove("json")
        end
      '
    }

    mutate {
      remove_field => ["agent", "ecs", "host", "input", "log", "tags"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => rubydebug
  }
}
